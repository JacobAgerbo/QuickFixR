color = color,
shape=shape,
line_weight = 0.5,
label=label) + scale_color_brewer(palette = palette) + scale_fill_brewer(palette = palette) + dark_theme_classic() +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
plotly.nw <- plotly::ggplotly(plot.nw, tooltip = c("color","shape", "label") )
return(list(plotly = plotly.nw))
}
# Test
networking(MAE,NW_max_dist = 0.3, NW_type = "samples", NW_color = "GROUP", NW_shape = "SEX", NW_distance = "unifrac", NW_palette = "Set2")
plotly.nw <- plotly::ggplotly(plot.nw, tooltip = c("color","shape", "label"))
# Test
networking(MAE,NW_max_dist = 0.3, NW_type = "samples", NW_color = "GROUP", NW_shape = "SEX", NW_distance = "unifrac", NW_palette = "Set2")
plotly.nw <- plotly::ggplotly(plot.nw, tooltip = c("color","shape"))
# Make network
networking <- function(MAE,
NW_max_dist = c(),
NW_color = c(),
NW_shape = c(),
NW_label=c(),
NW_type = c("samples", "taxa"),
NW_distance = c("jaccard","unifrac", "bray"),
NW_palette = c("Dark2", "Set1", "Set2","Set3", "Paired", "Pastel"))
{
set.seed(1)
# test presets
max.dist = NW_max_dist
color=NW_color
#tax_level = "Genus"
shape=NW_shape
label=NW_label
type = match.arg(NW_type)
distance = match.arg(NW_distance)
palette = match.arg(NW_palette)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
sam_table$ID <- rownames(sam_table)
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq::phyloseq(phyloseq::otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
phyloseq::tax_table(as.matrix(tax_table)),
phyloseq::sample_data(sam_table))
random_tree = ape::rtree(phyloseq::ntaxa(physeq), rooted=TRUE, tip.label=phyloseq::taxa_names(physeq))
physeq = phyloseq::merge_phyloseq(physeq, random_tree)
Network <- phyloseq::make_network(physeq, max.dist=max.dist, distance = distance)
if (length(label) == 0){
label = c("ID")
} else{
label = label
}
dark_mode <- source("https://raw.githubusercontent.com/nsgrantham/ggdark/master/R/dark_mode.R")
dark_theme_classic <- function(base_size = 11, base_family = "", base_line_size = base_size/22,
base_rect_size = base_size/22) {
dark_mode(theme_classic(base_size, base_family, base_line_size, base_rect_size))
}
plot.nw <- phyloseq::plot_network(Network, physeq, type = type,
color = color,
shape=shape,
line_weight = 0.5,
label=label) + scale_color_brewer(palette = palette) + scale_fill_brewer(palette = palette) + dark_theme_classic() +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
plotly.nw <- plotly::ggplotly(plot.nw, tooltip = c("color","shape"))
return(list(plotly = plotly.nw))
}
# Test
networking(MAE,NW_max_dist = 0.3, NW_type = "samples", NW_color = "GROUP", NW_shape = "SEX", NW_distance = "unifrac", NW_palette = "Set2")
# Test
networking(MAE,NW_max_dist = 0.3, NW_type = "samples", NW_color = "GROUP", NW_shape = "", NW_distance = "unifrac", NW_palette = "Set2")
# Test
networking(MAE,NW_max_dist = 0.3, NW_type = "samples", NW_color = "GROUP", NW_shape = "SEX", NW_distance = "unifrac", NW_palette = "Set2")
# Test
networking(MAE,NW_max_dist = 0.3, NW_type = "samples", NW_color = "GROUP", NW_shape = "GROUP", NW_distance = "unifrac", NW_palette = "Set2")
# Make network
networking <- function(MAE,
NW_max_dist = c(),
NW_color = c(),
NW_shape = c(),
NW_label=c(),
NW_type = c("samples", "taxa"),
NW_distance = c("jaccard","unifrac", "bray"),
NW_palette = c("Dark2", "Set1", "Set2","Set3", "Paired", "Pastel"))
{
set.seed(1)
# test presets
max.dist = NW_max_dist
color=NW_color
#tax_level = "Genus"
shape=NW_shape
label=NW_label
type = match.arg(NW_type)
distance = match.arg(NW_distance)
palette = match.arg(NW_palette)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
sam_table$ID <- rownames(sam_table)
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq::phyloseq(phyloseq::otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
phyloseq::tax_table(as.matrix(tax_table)),
phyloseq::sample_data(sam_table))
random_tree = ape::rtree(phyloseq::ntaxa(physeq), rooted=TRUE, tip.label=phyloseq::taxa_names(physeq))
physeq = phyloseq::merge_phyloseq(physeq, random_tree)
Network <- phyloseq::make_network(physeq, max.dist=max.dist, distance = distance)
if (length(label) == 0){
label = c("ID")
} else{
label = label
}
dark_mode <- source("https://raw.githubusercontent.com/nsgrantham/ggdark/master/R/dark_mode.R")
dark_theme_classic <- function(base_size = 11, base_family = "", base_line_size = base_size/22,
base_rect_size = base_size/22) {
dark_mode(theme_classic(base_size, base_family, base_line_size, base_rect_size))
}
plot.nw <- phyloseq::plot_network(Network, physeq, type = type,
color = color,
shape=shape,
line_weight = 0.5,
label=label) + scale_color_brewer(palette = palette) + scale_fill_brewer(palette = palette) + dark_theme_classic() +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
plotly.nw <- plotly::ggplotly(plot.nw, tooltip = c("colour","shape"))
return(list(plotly = plotly.nw))
}
# Test
networking(MAE,NW_max_dist = 0.3, NW_type = "samples", NW_color = "GROUP", NW_shape = "GROUP", NW_distance = "unifrac", NW_palette = "Set2")
# Test
networking(MAE,NW_max_dist = 0.3, NW_type = "samples", NW_color = "GROUP", NW_shape = "SEX", NW_distance = "unifrac", NW_palette = "Set2")
plotly.nw <- plotly::ggplotly(plot.nw, tooltip = c("colour","shape", "label"))
# Make network
networking <- function(MAE,
NW_max_dist = c(),
NW_color = c(),
NW_shape = c(),
NW_label=c(),
NW_type = c("samples", "taxa"),
NW_distance = c("jaccard","unifrac", "bray"),
NW_palette = c("Dark2", "Set1", "Set2","Set3", "Paired", "Pastel"))
{
set.seed(1)
# test presets
max.dist = NW_max_dist
color=NW_color
#tax_level = "Genus"
shape=NW_shape
label=NW_label
type = match.arg(NW_type)
distance = match.arg(NW_distance)
palette = match.arg(NW_palette)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
sam_table$ID <- rownames(sam_table)
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq::phyloseq(phyloseq::otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
phyloseq::tax_table(as.matrix(tax_table)),
phyloseq::sample_data(sam_table))
random_tree = ape::rtree(phyloseq::ntaxa(physeq), rooted=TRUE, tip.label=phyloseq::taxa_names(physeq))
physeq = phyloseq::merge_phyloseq(physeq, random_tree)
Network <- phyloseq::make_network(physeq, max.dist=max.dist, distance = distance)
if (length(label) == 0){
label = c("ID")
} else{
label = label
}
dark_mode <- source("https://raw.githubusercontent.com/nsgrantham/ggdark/master/R/dark_mode.R")
dark_theme_classic <- function(base_size = 11, base_family = "", base_line_size = base_size/22,
base_rect_size = base_size/22) {
dark_mode(theme_classic(base_size, base_family, base_line_size, base_rect_size))
}
plot.nw <- phyloseq::plot_network(Network, physeq, type = type,
color = color,
shape=shape,
line_weight = 0.5,
label=label) + scale_color_brewer(palette = palette) + scale_fill_brewer(palette = palette) + dark_theme_classic() +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
plotly.nw <- plotly::ggplotly(plot.nw, tooltip = c("colour","shape", "label"))
return(list(plotly = plotly.nw))
}
# Test
networking(MAE,NW_max_dist = 0.3, NW_type = "samples", NW_color = "GROUP", NW_shape = "SEX", NW_distance = "unifrac", NW_palette = "Set2")
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
# Test
networking(MAE,NW_max_dist = 0.3, NW_type = "samples", NW_color = "GROUP", NW_shape = "SEX", NW_distance = "unifrac", NW_palette = "Set2")
# Make network
networking <- function(MAE,
NW_max_dist = c(),
NW_color = c(),
NW_shape = c(),
NW_label=c(),
NW_type = c("samples", "taxa"),
NW_distance = c("jaccard","unifrac", "bray"),
NW_palette = c("Dark2", "Set1", "Set2","Set3", "Paired", "Pastel"))
{
set.seed(1)
# test presets
max.dist = NW_max_dist
color=NW_color
#tax_level = "Genus"
shape=NW_shape
label=NW_label
type = match.arg(NW_type)
distance = match.arg(NW_distance)
palette = match.arg(NW_palette)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
sam_table$ID <- rownames(sam_table)
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq::phyloseq(phyloseq::otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
phyloseq::tax_table(as.matrix(tax_table)),
phyloseq::sample_data(sam_table))
random_tree = ape::rtree(phyloseq::ntaxa(physeq), rooted=TRUE, tip.label=phyloseq::taxa_names(physeq))
physeq = phyloseq::merge_phyloseq(physeq, random_tree)
Network <- phyloseq::make_network(physeq, max.dist=max.dist, distance = distance)
if (length(label) == 0){
label = c("ID")
} else{
label = label
}
dark_mode <- source("https://raw.githubusercontent.com/nsgrantham/ggdark/master/R/dark_mode.R")
dark_theme_classic <- function(base_size = 11, base_family = "", base_line_size = base_size/22,
base_rect_size = base_size/22) {
dark_mode(theme_classic(base_size, base_family, base_line_size, base_rect_size))
}
plot.nw <- phyloseq::plot_network(Network, physeq, type = type,
color = color,
shape=shape,
line_weight = 0.5,
label=label) + scale_color_brewer(palette = palette) + scale_fill_brewer(palette = palette) +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
plotly.nw <- plotly::ggplotly(plot.nw, tooltip = c("colour","shape", "label"))
return(list(plotly = plotly.nw))
}
# Make network
networking <- function(MAE,
NW_max_dist = c(),
NW_color = c(),
NW_shape = c(),
NW_label=c(),
NW_type = c("samples", "taxa"),
NW_distance = c("jaccard","unifrac", "bray"),
NW_palette = c("Dark2", "Set1", "Set2","Set3", "Paired", "Pastel"))
{
set.seed(1)
# test presets
max.dist = NW_max_dist
color=NW_color
#tax_level = "Genus"
shape=NW_shape
label=NW_label
type = match.arg(NW_type)
distance = match.arg(NW_distance)
palette = match.arg(NW_palette)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
sam_table$ID <- rownames(sam_table)
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq::phyloseq(phyloseq::otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
phyloseq::tax_table(as.matrix(tax_table)),
phyloseq::sample_data(sam_table))
random_tree = ape::rtree(phyloseq::ntaxa(physeq), rooted=TRUE, tip.label=phyloseq::taxa_names(physeq))
physeq = phyloseq::merge_phyloseq(physeq, random_tree)
Network <- phyloseq::make_network(physeq, max.dist=max.dist, distance = distance)
if (length(label) == 0){
label = c("ID")
} else{
label = label
}
dark_mode <- source("https://raw.githubusercontent.com/nsgrantham/ggdark/master/R/dark_mode.R")
dark_theme_classic <- function(base_size = 11, base_family = "", base_line_size = base_size/22,
base_rect_size = base_size/22) {
dark_mode(theme_classic(base_size, base_family, base_line_size, base_rect_size))
}
plot.nw <- phyloseq::plot_network(Network, physeq, type = type,
color = color,
shape=shape,
line_weight = 0.5,
label=label) + scale_color_brewer(palette = palette) + scale_fill_brewer(palette = palette) +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
plotly.nw <- plotly::ggplotly(plot.nw, tooltip = c("colour","shape", "label"))
return(list(plotly = plotly.nw))
}
# Test
networking(MAE,NW_max_dist = 0.3, NW_type = "samples", NW_color = "GROUP", NW_shape = "SEX", NW_distance = "unifrac", NW_palette = "Set2")
# Test
networking(MAE,NW_max_dist = 0.3, NW_type = "samples", NW_color = "GROUP", NW_shape = "SEX", NW_distance = "unifrac", NW_palette = "Pastel")
# Make network
networking <- function(MAE,
NW_max_dist = c(),
NW_color = c(),
NW_shape = c(),
NW_label=c(),
NW_type = c("samples", "taxa"),
NW_distance = c("jaccard","unifrac", "bray"),
NW_palette = c("Dark2", "Set1", "Set2","Set3", "Paired", "Pastel"))
{
set.seed(1)
# test presets
max.dist = NW_max_dist
color=NW_color
#tax_level = "Genus"
shape=NW_shape
label=NW_label
type = match.arg(NW_type)
distance = match.arg(NW_distance)
palette = match.arg(NW_palette)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
sam_table$ID <- rownames(sam_table)
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq::phyloseq(phyloseq::otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
phyloseq::tax_table(as.matrix(tax_table)),
phyloseq::sample_data(sam_table))
random_tree = ape::rtree(phyloseq::ntaxa(physeq), rooted=TRUE, tip.label=phyloseq::taxa_names(physeq))
physeq = phyloseq::merge_phyloseq(physeq, random_tree)
Network <- phyloseq::make_network(physeq, max.dist=max.dist, distance = distance)
if (length(label) == 0){
label = c("ID")
} else{
label = label
}
dark_mode <- source("https://raw.githubusercontent.com/nsgrantham/ggdark/master/R/dark_mode.R")
dark_theme_classic <- function(base_size = 11, base_family = "", base_line_size = base_size/22,
base_rect_size = base_size/22) {
dark_mode(theme_classic(base_size, base_family, base_line_size, base_rect_size))
}
plot.nw <- phyloseq::plot_network(Network, physeq, type = type,
color = color,
shape=shape,
line_weight = 0.5,
label=label) + scale_color_brewer(palette = palette) + scale_fill_brewer(palette = palette) + dark_theme_classic() +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()
)
plotly.nw <- plotly::ggplotly(plot.nw, tooltip = c("colour","shape", "label"))
return(list(plotly = plotly.nw))
}
# Test
networking(MAE,NW_max_dist = 0.3, NW_type = "samples", NW_color = "GROUP", NW_shape = "SEX", NW_distance = "unifrac", NW_palette = "Pastel")
devtools::install_github("JacobAgerbo/QuickFixR")
path = "~/Downloads/bin_by_bin/¨"
path = "~/Downloads/bin_by_bin/JH*"
path = "~/Downloads/bin_by_bin/"
my_files <- list.files(path,pattern = "*.txt", full.names = TRUE)
df.list = lapply(my_files, function(i){
x = read_table(i, sep = "\t")
x = x[,c(1,2,6)]
x$file = i
x
})
x = read.table(i, sep = "\t")
df.list = lapply(my_files, function(i){
x = utils::read.table(i, sep = "\t")
x = x[,c(1,2,6)]
x$file = i
x
})
df.list = lapply(my_files, function(i){
x = utils::read.table(i, sep = "\t")
x = x[,c(1,2,6)]
x$file = i
x
})
df.list = lapply(my_files, function(i){
x = utils::read.table(i, sep = "\t")
x$file = i
x
})
df.list = lapply(my_files, function(i){
x = utils::read.table(i, sep = "\t")
x$file = i
x
})
#
QuickFixR::QuickFix()
dark_mode <- source("https://raw.githubusercontent.com/nsgrantham/ggdark/master/R/dark_mode.R")
dark_mode
dark_mode
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
filter_summary_bar_density
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
filter_summary_bar_density
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
filter_summary_pie_box
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
filter_summary_pie_box
mae_pick_samples
filter_summary_top_plot
filter_summary_bar_density
filter_summary_bar_density
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
devtools::install_github("JacobAgerbo/QuickFixR")
#
QuickFixR::QuickFix()
