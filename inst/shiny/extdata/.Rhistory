shape=shape,
line_weight = 0.5,
label=label)
library(plotly)
plotly.nw <- ggplotly(plot.nw)
# Return results
output<-list(print = plot.nw,
plot = plotly.nw )
return(output)
}
# Test
test <- networking(MAE, "genus", color = "SEX", shape = "GROUP", distance = "unifrac")
#tax_level = "Genus"
shape=shape
# Make network
networking <- function(MAE,
tax_level,
color = c(),
shape = c(),
label=c(),
distance = c("jaccard","unifrac", "bray"))
{
tax_level = tax_level
# test presets
#tax_level = "genus"
color=color
#tax_level = "Genus"
shape=shape
label=label
distance = match.arg(distance)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq(otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
tax_table(as.matrix(tax_table)),
sample_data(sam_table))
library("ape")
random_tree = rtree(ntaxa(physeq), rooted=TRUE, tip.label=taxa_names(physeq))
physeq = merge_phyloseq(physeq, random_tree)
Network <- make_network(physeq, max.dist=0.3, distance = distance)
plot.nw <- plot_network(Network, physeq, color = color,
shape=shape,
line_weight = 0.5,
label=label)
library(plotly)
plotly.nw <- ggplotly(plot.nw)
# Return results
output<-list(print = plot.nw,
plot = plotly.nw )
return(output)
}
# Test
test <- networking(MAE, "genus", color = "SEX", shape = "GROUP", distance = "unifrac")
test$plot
# Test
test <- networking(MAE, color = "SEX", shape = "AGE", distance = "unifrac")
# Make network
networking <- function(MAE,
color = c(),
shape = c(),
label=c(),
distance = c("jaccard","unifrac", "bray"))
{
# test presets
#tax_level = "genus"
color=color
#tax_level = "Genus"
shape=shape
label=label
distance = match.arg(distance)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq(otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
tax_table(as.matrix(tax_table)),
sample_data(sam_table))
library("ape")
random_tree = rtree(ntaxa(physeq), rooted=TRUE, tip.label=taxa_names(physeq))
physeq = merge_phyloseq(physeq, random_tree)
Network <- make_network(physeq, max.dist=0.3, distance = distance)
plot.nw <- plot_network(Network, physeq, color = color,
shape=shape,
line_weight = 0.5,
label=label)
library(plotly)
plotly.nw <- ggplotly(plot.nw)
# Return results
output<-list(print = plot.nw,
plot = plotly.nw )
return(output)
}
# Test
test <- networking(MAE, color = "SEX", shape = "AGE", distance = "unifrac")
test$plot
# Test
test <- networking(MAE, color = "SEX", shape = "GROUP", distance = "unifrac")
test$plot
# Make network
networking <- function(MAE,
color = c(),
shape = c(),
label=c(),
type = c("samples", "taxa"),
distance = c("jaccard","unifrac", "bray"))
{
# test presets
#tax_level = "genus"
color=color
#tax_level = "Genus"
shape=shape
label=label
distance = match.arg(distance)
type = match.arg(type)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq(otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
tax_table(as.matrix(tax_table)),
sample_data(sam_table))
library("ape")
random_tree = rtree(ntaxa(physeq), rooted=TRUE, tip.label=taxa_names(physeq))
physeq = merge_phyloseq(physeq, random_tree)
Network <- make_network(physeq, max.dist=0.3, distance = distance)
plot.nw <- plot_network(Network, physeq, type = type,
color = color,
shape=shape,
line_weight = 0.5,
label=label)
library(plotly)
plotly.nw <- ggplotly(plot.nw)
# Return results
output<-list(print = plot.nw,
plot = plotly.nw )
return(output)
}
# Test
test <- networking(MAE, type = "samples, color = "SEX", shape = "GROUP", distance = "unifrac")
test$plot
test$print
# Test
test <- networking(MAE, type = "samples", color = "SEX", shape = "GROUP", distance = "unifrac")
test$plot
# Test
test <- networking(MAE, type = "taxa", color = "SEX", shape = "GROUP", distance = "unifrac")
# Test
test <- networking(MAE, type = "taxa", shape = "GROUP", distance = "unifrac")
# Test
test <- networking(MAE, type = "taxa", color = "phylum", shape = "GROUP", distance = "unifrac")
# Test
test <- networking(MAE, type = "taxa", color = "phylum", distance = "unifrac")
# Test
test <- networking(MAE, type = "taxa", color = "Phylum", distance = "unifrac")
# Test
test <- networking(MAE, type = "taxa", color = "genus", distance = "unifrac")
# Test
test <- networking(MAE, type = "taxa", color = "SEX", distance = "unifrac")
# Test
test <- networking(MAE, type = "taxa", distance = "unifrac")
test$plot
# Test
test <- networking(MAE, type = "samples", color = "SEX", shape = "GROUP", distance = "unifrac")
test$plot
# Test
test <- networking(MAE, type = "samples", color = "SEX", shape = "GROUP", distance = "bray")
test$plot
# Test
test <- networking(MAE, type = "samples", color = "SEX", shape = "GROUP", distance = "bray")
test$plot
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
View(counts_table)
View(tax_table)
View(sam_table)
sam_table$ID <- rownames(sam_table)
View(sam_table)
# Make network
networking <- function(MAE,
color = c(),
shape = c(),
label=c(),
type = c("samples", "taxa"),
distance = c("jaccard","unifrac", "bray"))
{
# test presets
#tax_level = "genus"
color=color
#tax_level = "Genus"
shape=shape
label=ID
distance = match.arg(distance)
type = match.arg(type)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
sam_table$ID <- rownames(sam_table)
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq(otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
tax_table(as.matrix(tax_table)),
sample_data(sam_table))
library("ape")
random_tree = rtree(ntaxa(physeq), rooted=TRUE, tip.label=taxa_names(physeq))
physeq = merge_phyloseq(physeq, random_tree)
Network <- make_network(physeq, max.dist=0.3, distance = distance)
plot.nw <- plot_network(Network, physeq, type = type,
color = color,
shape=shape,
line_weight = 0.5,
label=label)
library(plotly)
plotly.nw <- ggplotly(plot.nw)
# Return results
output<-list(print = plot.nw,
plot = plotly.nw )
return(output)
}
# Test
test <- networking(MAE, type = "samples", color = "SEX", shape = "GROUP", distance = "bray")
# Make network
networking <- function(MAE,
color = c(),
shape = c(),
label=c(),
type = c("samples", "taxa"),
distance = c("jaccard","unifrac", "bray"))
{
# test presets
#tax_level = "genus"
color=color
#tax_level = "Genus"
shape=shape
label=label
distance = match.arg(distance)
type = match.arg(type)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
sam_table$ID <- rownames(sam_table)
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq(otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
tax_table(as.matrix(tax_table)),
sample_data(sam_table))
library("ape")
random_tree = rtree(ntaxa(physeq), rooted=TRUE, tip.label=taxa_names(physeq))
physeq = merge_phyloseq(physeq, random_tree)
Network <- make_network(physeq, max.dist=0.3, distance = distance)
plot.nw <- plot_network(Network, physeq, type = type,
color = color,
shape=shape,
line_weight = 0.5,
label=label)
library(plotly)
plotly.nw <- ggplotly(plot.nw)
# Return results
output<-list(print = plot.nw,
plot = plotly.nw )
return(output)
}
# Test
test <- networking(MAE, type = "samples",label = "ID", color = "SEX", shape = "GROUP", distance = "bray")
test$plot
test$print
set.seed(1)
# Make network
networking <- function(MAE,
color = c(),
shape = c(),
label=c(),
type = c("samples", "taxa"),
distance = c("jaccard","unifrac", "bray"))
{
set.seed(1)
# test presets
#tax_level = "genus"
color=color
#tax_level = "Genus"
shape=shape
label=label
distance = match.arg(distance)
type = match.arg(type)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
sam_table$ID <- rownames(sam_table)
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq(otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
tax_table(as.matrix(tax_table)),
sample_data(sam_table))
library("ape")
random_tree = rtree(ntaxa(physeq), rooted=TRUE, tip.label=taxa_names(physeq))
physeq = merge_phyloseq(physeq, random_tree)
Network <- make_network(physeq, max.dist=0.3, distance = distance)
plot.nw <- plot_network(Network, physeq, type = type,
color = color,
shape=shape,
line_weight = 0.5,
label=label)
library(plotly)
plotly.nw <- ggplotly(plot.nw)
# Return results
output<-list(print = plot.nw,
plot = plotly.nw )
return(output)
}
# Test
test <- networking(MAE, type = "samples",label = "ID", color = "SEX", shape = "GROUP", distance = "bray")
test$plot
test$plot
# Test
test <- networking(MAE, type = "samples",label = "ID", color = "SEX", shape = "GROUP", distance = "bray")
test$plot
label=label
if length(label) == 0 {
label = c("ID")
} else{
label = label
}
if (length(label) == 0){
label = c("ID")
} else{
label = label
}
# Make network
networking <- function(MAE,
color = c(),
shape = c(),
label=c(),
type = c("samples", "taxa"),
distance = c("jaccard","unifrac", "bray"))
{
set.seed(1)
# test presets
#tax_level = "genus"
color=color
#tax_level = "Genus"
shape=shape
label=label
distance = match.arg(distance)
type = match.arg(type)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
sam_table$ID <- rownames(sam_table)
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq(otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
tax_table(as.matrix(tax_table)),
sample_data(sam_table))
library("ape")
random_tree = rtree(ntaxa(physeq), rooted=TRUE, tip.label=taxa_names(physeq))
physeq = merge_phyloseq(physeq, random_tree)
Network <- make_network(physeq, max.dist=0.3, distance = distance)
if (length(label) == 0){
label = c("ID")
} else{
label = label
}
plot.nw <- plot_network(Network, physeq, type = type,
color = color,
shape=shape,
line_weight = 0.5,
label=label)
library(plotly)
plotly.nw <- ggplotly(plot.nw)
# Return results
output<-list(print = plot.nw,
plot = plotly.nw )
return(output)
}
# Test
test <- networking(MAE, type = "samples", color = "SEX", shape = "GROUP", distance = "bray")
test$plot
# Test
test <- networking(MAE, type = "samples", label = "SEX", color = "SEX", shape = "GROUP", distance = "bray")
test$plot
# Test
test <- networking(MAE, type = "taxa", distance = "bray")
# Test
test <- networking(MAE, type = "samples", color = "SEX", shape = "GROUP", distance = "bray")
test$plot
# Test
test <- networking(MAE, type = "samples", color = "SEX", shape = "GROUP", distance = "unifrac")
test$plot
setwd("Documents/GitHub/QuickFixR/inst/shiny/extdata/")
MAE <- readRDS("MAE.rds")
# Make network
networking <- function(MAE,
color = c(),
shape = c(),
label=c(),
type = c("samples", "taxa"),
distance = c("jaccard","unifrac", "bray"))
{
set.seed(1)
# test presets
#tax_level = "genus"
color=color
#tax_level = "Genus"
shape=shape
label=label
distance = match.arg(distance)
type = match.arg(type)
## tables from MAE
microbe <- MAE[['MicrobeGenetics']] #double bracket subsetting is easier
# organism x taxlev
tax_table <-
as.data.frame(SummarizedExperiment::rowData(microbe))
# sample x condition
sam_table <-
as.data.frame(SummarizedExperiment::colData(microbe))
sam_table$ID <- rownames(sam_table)
# organism x sample
counts_table <-
as.data.frame(SummarizedExperiment::assays(microbe))[,rownames(sam_table)]
#
physeq <- phyloseq::phyloseq(otu_table(as.matrix(counts_table),taxa_are_rows=TRUE),
tax_table(as.matrix(tax_table)),
sample_data(sam_table))
random_tree = ape::rtree(ntaxa(physeq), rooted=TRUE, tip.label=taxa_names(physeq))
physeq = phyloseq::merge_phyloseq(physeq, random_tree)
Network <- phyloseq::make_network(physeq, max.dist=0.3, distance = distance)
if (length(label) == 0){
label = c("ID")
} else{
label = label
}
plot.nw <- phyloseq::plot_network(Network, physeq, type = type,
color = color,
shape=shape,
line_weight = 0.5,
label=label)
plotly.nw <- plotly::ggplotly(plot.nw)
# Return results
output<-list(print = plot.nw,
plot = plotly.nw )
return(output)
}
# Test
test <- networking(MAE, type = "samples", color = "SEX", shape = "GROUP", distance = "unifrac")
test$plot
# Test
test <- networking(MAE, type = "samples", label = "AGE", color = "SEX", shape = "GROUP", distance = "unifrac")
test$plot
# Test
test <- networking(MAE, type = "samples", color = "SEX", shape = "GROUP", distance = "unifrac")
test$plot
