var_coef_plot <- subplot(coef_plot, var_plot, nrows = 2, margin = 0.04, heights = c(0.6, 0.4))
ord_plot <- gg_lvsplot(fit_traits, include = "both") + scale_color_brewer(palette = "Dark2")
coef_stats <- as.data.frame(summary(fit_traits)$coefficients)
coef_stats$Feature <- rownames(coef_stats)
return(list(ord_plot= ord_plot,
var_coef_plot = var_coef_plot,
coef_stats = coef_stats))
}
doBORAL_ord <- function(MAE, tax_level, boral_covariates=c(), family, datatype = c("logcpm", "relabu", "counts"), MCMC.control=c("High","Low","DryRun"))
{
tax_level = tax_level
#tax_level = "genus"
#boral_covariates = match.arg(boral_covariates, several.ok = TRUE)
#boral_covariates = c("AGE","DISEASE","GROUP")
family = family
#family = "normal"
datatype = match.arg(datatype)
#datatype = "logcpm"
MCMC.control = match.arg(MCMC.control)
#MCMC.control = "DryRun"
# get data from MAE ----
microbe <- MAE[["MicrobeGenetics"]]
tax_table <- as.data.frame(rowData(microbe))
sam_table <- as.data.frame(colData(microbe))
counts_table <- as.data.frame(assays(microbe))[, rownames(sam_table)]
counts_table <- counts_table
y <- counts_table %>% upsample_counts(tax_table, tax_level) %>%
{
if (datatype == "relabu") {
counts_to_relabu(.)
}
else if (datatype == "logcpm") {
counts_to_logcpm(.)
}
else {
.
}
} %>% {
if (sum(base::rowSums(as.matrix(.)) == 0) > 0) {
. <- .[-which(base::rowSums(as.matrix(.)) == 0),
]
}
else {
.
}
} %>%  t()
X <- sam_table %>%
select(boral_covariates)
# change chars to nums ----
# Identify and change character columns to numeric in the covariate matrix, else BORAL will fails. Strings are alphabetically. So "A" becomes 1, "B" becomes 2, etc.
char_columns <- sapply(X, is.character)
char_columns <- names(char_columns[char_columns==TRUE])
X[ , char_columns] <- apply(X[ , char_columns,drop=F], 2,
function(x) as.numeric(as.factor(x)))
# define testpath ----
testpath <- file.path(tempdir(), "jagsboralmodel.txt")
# define MCMC control based on shiny settings ----
if (MCMC.control == "High"){
control = list(n.burnin = 10000, n.iteration = 40000, n.thin = 30, seed = 123)
} else if (MCMC.control == "Disease_Challenge"){
control = list(n.burnin = 1000, n.iteration = 4000, n.thin = 30, seed = 123)
} else if (MCMC.control == "DryRun"){
control = list(n.burnin = 10, n.iteration = 400, n.thin = 30, seed = 1)
}
# run boral ----
fit_traits <- boral(y, X = Covariates, family = family,
mcmc.control = control, model.name = testpath,
lv.control = list(num.lv = 2, type = "independent", distmat = NULL), save.model = TRUE)
# plot model ----
ord_plot <- gg_lvsplot(fit_traits, include = "both") + scale_color_brewer(palette = "Dark2")
return(ord_plot)
}
# test
doBORAL(MAE, "genus", boral_covariates=c("AGE","DISEASE","SEX"), family = "normal", datatype ="logcpm", MCMC.control="DryRun")
dependencies <- c("devtools","BiocManager","shiny","shinyjs",
"MultiAssayExperiment","ggplot2","plotly",
"vegan","dplyr","magrittr","biomformat",
"shinythemes","RColorBrewer","decontam",
"animalcules","limma", "broom.mixed", "lmerTest", "performance", "gt", "gtExtras","boral","ggboral", "tidyverse", "pbkrtest", "ggiraph", "hilldiv")
# Packages loading
invisible(lapply(dependencies, library, character.only = TRUE))
# test
doBORAL(MAE, "genus", boral_covariates=c("AGE","DISEASE","SEX"), family = "normal", datatype ="logcpm", MCMC.control="DryRun")
doBORAL <- function(MAE, tax_level, boral_covariates=c(), family, datatype = c("logcpm", "relabu", "counts"), MCMC.control=c("High","Low","DryRun"))
{
tax_level = tax_level
#tax_level = "genus"
#boral_covariates = match.arg(boral_covariates, several.ok = TRUE)
boral_covariates = boral_covariates
family = family
#family = "normal"
datatype = match.arg(datatype)
#datatype = "logcpm"
MCMC.control = match.arg(MCMC.control)
#MCMC.control = "DryRun"
# get data from MAE ----
microbe <- MAE[["MicrobeGenetics"]]
tax_table <- as.data.frame(rowData(microbe))
sam_table <- as.data.frame(colData(microbe))
counts_table <- as.data.frame(assays(microbe))[, rownames(sam_table)]
counts_table <- counts_table
y <- counts_table %>% upsample_counts(tax_table, tax_level) %>%
{
if (datatype == "relabu") {
counts_to_relabu(.)
}
else if (datatype == "logcpm") {
counts_to_logcpm(.)
}
else {
.
}
} %>% {
if (sum(base::rowSums(as.matrix(.)) == 0) > 0) {
. <- .[-which(base::rowSums(as.matrix(.)) == 0),
]
}
else {
.
}
} %>%  t()
X <- sam_table %>%
select(boral_covariates)
# change chars to nums ----
# Identify and change character columns to numeric in the covariate matrix, else BORAL will fails. Strings are alphabetically. So "A" becomes 1, "B" becomes 2, etc.
char_columns <- sapply(X, is.character)
char_columns <- names(char_columns[char_columns==TRUE])
X[ , char_columns] <- apply(X[ , char_columns,drop=F], 2,
function(x) as.numeric(as.factor(x)))
# define testpath ----
testpath <- file.path(tempdir(), "jagsboralmodel.txt")
# define MCMC control based on shiny settings ----
if (MCMC.control == "High"){
control = list(n.burnin = 10000, n.iteration = 40000, n.thin = 30, seed = 123)
} else if (MCMC.control == "Disease_Challenge"){
control = list(n.burnin = 1000, n.iteration = 4000, n.thin = 30, seed = 123)
} else if (MCMC.control == "DryRun"){
control = list(n.burnin = 10, n.iteration = 400, n.thin = 30, seed = 1)
}
# run boral ----
fit_traits <- boral(y, X = Covariates, family = family,
mcmc.control = control, model.name = testpath,
lv.control = list(num.lv = 2, type = "independent", distmat = NULL), save.model = TRUE)
# plot model ----
var_plot <- ggplotly(gg_varpart(fit_traits, as.percent = TRUE, label.means = FALSE))
coef_plot <- ggplotly(gg_coefsplot(fit_traits, palette = "Greens"))
var_coef_plot <- subplot(coef_plot, var_plot, nrows = 2, margin = 0.04, heights = c(0.6, 0.4))
ord_plot <- gg_lvsplot(fit_traits, include = "both") + scale_color_brewer(palette = "Dark2")
coef_stats <- as.data.frame(summary(fit_traits)$coefficients)
coef_stats$Feature <- rownames(coef_stats)
return(list(ord_plot= ord_plot,
var_coef_plot = var_coef_plot,
coef_stats = coef_stats))
}
# test
doBORAL(MAE, "genus", boral_covariates=c("AGE","DISEASE","SEX"), family = "normal", datatype ="logcpm", MCMC.control="DryRun")
# test
doBORAL(MAE, "genus", boral_covariates="AGE", family = "normal", datatype ="logcpm", MCMC.control="DryRun")
doBORAL <- function(MAE, tax_level, boral_covariates=c(), family, datatype = c("logcpm", "relabu", "counts"), MCMC.control=c("High","Low","DryRun"))
{
tax_level = tax_level
#tax_level = "genus"
#boral_covariates = match.arg(boral_covariates, several.ok = TRUE)
boral_covariates = boral_covariates
family = family
#family = "normal"
datatype = match.arg(datatype)
#datatype = "logcpm"
MCMC.control = match.arg(MCMC.control)
#MCMC.control = "DryRun"
# get data from MAE ----
microbe <- MAE[["MicrobeGenetics"]]
tax_table <- as.data.frame(rowData(microbe))
sam_table <- as.data.frame(colData(microbe))
counts_table <- as.data.frame(assays(microbe))[, rownames(sam_table)]
counts_table <- counts_table
y <- counts_table %>% upsample_counts(tax_table, tax_level) %>%
{
if (datatype == "relabu") {
counts_to_relabu(.)
}
else if (datatype == "logcpm") {
counts_to_logcpm(.)
}
else {
.
}
} %>% {
if (sum(base::rowSums(as.matrix(.)) == 0) > 0) {
. <- .[-which(base::rowSums(as.matrix(.)) == 0),
]
}
else {
.
}
} %>%  t()
X <- sam_table %>%
select(boral_covariates)
# change chars to nums ----
# Identify and change character columns to numeric in the covariate matrix, else BORAL will fails. Strings are alphabetically. So "A" becomes 1, "B" becomes 2, etc.
char_columns <- sapply(X, is.character)
char_columns <- names(char_columns[char_columns==TRUE])
X[ , char_columns] <- apply(X[ , char_columns,drop=F], 2,
function(x) as.numeric(as.factor(x)))
# define testpath ----
testpath <- file.path(tempdir(), "jagsboralmodel.txt")
# define MCMC control based on shiny settings ----
if (MCMC.control == "High"){
control = list(n.burnin = 10000, n.iteration = 40000, n.thin = 30, seed = 123)
} else if (MCMC.control == "Disease_Challenge"){
control = list(n.burnin = 1000, n.iteration = 4000, n.thin = 30, seed = 123)
} else if (MCMC.control == "DryRun"){
control = list(n.burnin = 10, n.iteration = 400, n.thin = 30, seed = 1)
}
# run boral ----
fit_traits <- boral(y, X = X, family = family,
mcmc.control = control, model.name = testpath,
lv.control = list(num.lv = 2, type = "independent", distmat = NULL), save.model = TRUE)
# plot model ----
var_plot <- ggplotly(gg_varpart(fit_traits, as.percent = TRUE, label.means = FALSE))
coef_plot <- ggplotly(gg_coefsplot(fit_traits, palette = "Greens"))
var_coef_plot <- subplot(coef_plot, var_plot, nrows = 2, margin = 0.04, heights = c(0.6, 0.4))
ord_plot <- gg_lvsplot(fit_traits, include = "both") + scale_color_brewer(palette = "Dark2")
coef_stats <- as.data.frame(summary(fit_traits)$coefficients)
coef_stats$Feature <- rownames(coef_stats)
return(list(ord_plot= ord_plot,
var_coef_plot = var_coef_plot,
coef_stats = coef_stats))
}
# test
doBORAL(MAE, "genus", boral_covariates=c("AGE","DISEASE","SEX"), family = "normal", datatype ="logcpm", MCMC.control="DryRun")
runApp()
# test
doBORAL(MAE, "genus", boral_covariates=c("AGE","DISEASE","SEX"), family = "normal", datatype ="logcpm", MCMC.control="DryRun")
doBORAL <- function(MAE, tax_level, boral_covariates=c(), family, datatype = c("logcpm", "relabu", "counts"), MCMC.control=c("High","Low","DryRun"))
{
tax_level = tax_level
#tax_level = "genus"
#boral_covariates = match.arg(boral_covariates, several.ok = TRUE)
boral_covariates = boral_covariates
family = family
#family = "normal"
datatype = match.arg(datatype)
#datatype = "logcpm"
MCMC.control = match.arg(MCMC.control)
#MCMC.control = "DryRun"
# get data from MAE ----
microbe <- MAE[["MicrobeGenetics"]]
tax_table <- as.data.frame(rowData(microbe))
sam_table <- as.data.frame(colData(microbe))
counts_table <- as.data.frame(assays(microbe))[, rownames(sam_table)]
counts_table <- counts_table
y <- counts_table %>% upsample_counts(tax_table, tax_level) %>%
{
if (datatype == "relabu") {
counts_to_relabu(.)
}
else if (datatype == "logcpm") {
counts_to_logcpm(.)
}
else {
.
}
} %>% {
if (sum(base::rowSums(as.matrix(.)) == 0) > 0) {
. <- .[-which(base::rowSums(as.matrix(.)) == 0),
]
}
else {
.
}
} %>%  t()
X <- sam_table %>%
select(boral_covariates)
# change chars to nums ----
# Identify and change character columns to numeric in the covariate matrix, else BORAL will fails. Strings are alphabetically. So "A" becomes 1, "B" becomes 2, etc.
char_columns <- sapply(X, is.character)
char_columns <- names(char_columns[char_columns==TRUE])
X[ , char_columns] <- apply(X[ , char_columns,drop=F], 2,
function(x) as.numeric(as.factor(x)))
# define testpath ----
testpath <- file.path(tempdir(), "jagsboralmodel.txt")
# define MCMC control based on shiny settings ----
if (MCMC.control == "High"){
control = list(n.burnin = 10000, n.iteration = 40000, n.thin = 30, seed = 123)
} else if (MCMC.control == "Disease_Challenge"){
control = list(n.burnin = 1000, n.iteration = 4000, n.thin = 30, seed = 123)
} else if (MCMC.control == "DryRun"){
control = list(n.burnin = 10, n.iteration = 400, n.thin = 30, seed = 1)
}
# run boral ----
fit_traits <- boral(y, X = X, family = family,
mcmc.control = control, model.name = testpath,
lv.control = list(num.lv = 2, type = "independent", distmat = NULL), save.model = TRUE)
# plot model ----
var_plot <- ggplotly(gg_varpart(fit_traits, as.percent = TRUE, label.means = FALSE))
coef_plot <- ggplotly(gg_coefsplot(fit_traits, palette = "Greens"))
var_coef_plot <- plotly::subplot(coef_plot, var_plot, margin = 0.04)
ord_plot <- gg_lvsplot(fit_traits, include = "both") + scale_color_brewer(palette = "Dark2")
coef_stats <- as.data.frame(summary(fit_traits)$coefficients)
coef_stats$Feature <- rownames(coef_stats)
return(list(ord_plot= ord_plot,
var_coef_plot = var_coef_plot,
coef_stats = coef_stats))
}
doBORAL_ord <- function(MAE, tax_level, boral_covariates=c(), family, datatype = c("logcpm", "relabu", "counts"), MCMC.control=c("High","Low","DryRun"))
{
tax_level = tax_level
#tax_level = "genus"
#boral_covariates = match.arg(boral_covariates, several.ok = TRUE)
#boral_covariates = c("AGE","DISEASE","GROUP")
family = family
#family = "normal"
datatype = match.arg(datatype)
#datatype = "logcpm"
MCMC.control = match.arg(MCMC.control)
#MCMC.control = "DryRun"
# get data from MAE ----
microbe <- MAE[["MicrobeGenetics"]]
tax_table <- as.data.frame(rowData(microbe))
sam_table <- as.data.frame(colData(microbe))
counts_table <- as.data.frame(assays(microbe))[, rownames(sam_table)]
counts_table <- counts_table
y <- counts_table %>% upsample_counts(tax_table, tax_level) %>%
{
if (datatype == "relabu") {
counts_to_relabu(.)
}
else if (datatype == "logcpm") {
counts_to_logcpm(.)
}
else {
.
}
} %>% {
if (sum(base::rowSums(as.matrix(.)) == 0) > 0) {
. <- .[-which(base::rowSums(as.matrix(.)) == 0),
]
}
else {
.
}
} %>%  t()
X <- sam_table %>%
select(boral_covariates)
# change chars to nums ----
# Identify and change character columns to numeric in the covariate matrix, else BORAL will fails. Strings are alphabetically. So "A" becomes 1, "B" becomes 2, etc.
char_columns <- sapply(X, is.character)
char_columns <- names(char_columns[char_columns==TRUE])
X[ , char_columns] <- apply(X[ , char_columns,drop=F], 2,
function(x) as.numeric(as.factor(x)))
# define testpath ----
testpath <- file.path(tempdir(), "jagsboralmodel.txt")
# define MCMC control based on shiny settings ----
if (MCMC.control == "High"){
control = list(n.burnin = 10000, n.iteration = 40000, n.thin = 30, seed = 123)
} else if (MCMC.control == "Disease_Challenge"){
control = list(n.burnin = 1000, n.iteration = 4000, n.thin = 30, seed = 123)
} else if (MCMC.control == "DryRun"){
control = list(n.burnin = 10, n.iteration = 400, n.thin = 30, seed = 1)
}
# run boral ----
fit_traits <- boral(y, X = X, family = family,
mcmc.control = control, model.name = testpath,
lv.control = list(num.lv = 2, type = "independent", distmat = NULL), save.model = TRUE)
# plot model ----
ord_plot <- gg_lvsplot(fit_traits, include = "both") + scale_color_brewer(palette = "Dark2")
return(ord_plot)
}
# test
doBORAL(MAE, "genus", boral_covariates=c("AGE","DISEASE","SEX"), family = "normal", datatype ="logcpm", MCMC.control="DryRun")
doBORAL <- function(MAE, tax_level, boral_covariates=c(), family, datatype = c("logcpm", "relabu", "counts"), MCMC.control=c("High","Low","DryRun"))
{
tax_level = tax_level
#tax_level = "genus"
#boral_covariates = match.arg(boral_covariates, several.ok = TRUE)
boral_covariates = boral_covariates
family = family
#family = "normal"
datatype = match.arg(datatype)
#datatype = "logcpm"
MCMC.control = match.arg(MCMC.control)
#MCMC.control = "DryRun"
# get data from MAE ----
microbe <- MAE[["MicrobeGenetics"]]
tax_table <- as.data.frame(rowData(microbe))
sam_table <- as.data.frame(colData(microbe))
counts_table <- as.data.frame(assays(microbe))[, rownames(sam_table)]
counts_table <- counts_table
y <- counts_table %>% upsample_counts(tax_table, tax_level) %>%
{
if (datatype == "relabu") {
counts_to_relabu(.)
}
else if (datatype == "logcpm") {
counts_to_logcpm(.)
}
else {
.
}
} %>% {
if (sum(base::rowSums(as.matrix(.)) == 0) > 0) {
. <- .[-which(base::rowSums(as.matrix(.)) == 0),
]
}
else {
.
}
} %>%  t()
X <- sam_table %>%
select(boral_covariates)
# change chars to nums ----
# Identify and change character columns to numeric in the covariate matrix, else BORAL will fails. Strings are alphabetically. So "A" becomes 1, "B" becomes 2, etc.
char_columns <- sapply(X, is.character)
char_columns <- names(char_columns[char_columns==TRUE])
X[ , char_columns] <- apply(X[ , char_columns,drop=F], 2,
function(x) as.numeric(as.factor(x)))
# define testpath ----
testpath <- file.path(tempdir(), "jagsboralmodel.txt")
# define MCMC control based on shiny settings ----
if (MCMC.control == "High"){
control = list(n.burnin = 10000, n.iteration = 40000, n.thin = 30, seed = 123)
} else if (MCMC.control == "Disease_Challenge"){
control = list(n.burnin = 1000, n.iteration = 4000, n.thin = 30, seed = 123)
} else if (MCMC.control == "DryRun"){
control = list(n.burnin = 10, n.iteration = 400, n.thin = 30, seed = 1)
}
# run boral ----
fit_traits <- boral(y, X = X, family = family,
mcmc.control = control, model.name = testpath,
lv.control = list(num.lv = 2, type = "independent", distmat = NULL), save.model = TRUE)
# plot model ----
var_plot <- ggplotly(gg_varpart(fit_traits, as.percent = TRUE, label.means = FALSE))
coef_plot <- ggplotly(gg_coefsplot(fit_traits, palette = "Greens"))
var_coef_plot <- plotly::subplot(coef_plot,
var_plot %>% layout(showlegend = FALSE),
margin = 0.04)
ord_plot <- gg_lvsplot(fit_traits, include = "both") + scale_color_brewer(palette = "Dark2")
coef_stats <- as.data.frame(summary(fit_traits)$coefficients)
coef_stats$Feature <- rownames(coef_stats)
return(list(ord_plot= ord_plot,
var_coef_plot = var_coef_plot,
coef_stats = coef_stats))
}
doBORAL_ord <- function(MAE, tax_level, boral_covariates=c(), family, datatype = c("logcpm", "relabu", "counts"), MCMC.control=c("High","Low","DryRun"))
{
tax_level = tax_level
#tax_level = "genus"
#boral_covariates = match.arg(boral_covariates, several.ok = TRUE)
#boral_covariates = c("AGE","DISEASE","GROUP")
family = family
#family = "normal"
datatype = match.arg(datatype)
#datatype = "logcpm"
MCMC.control = match.arg(MCMC.control)
#MCMC.control = "DryRun"
# get data from MAE ----
microbe <- MAE[["MicrobeGenetics"]]
tax_table <- as.data.frame(rowData(microbe))
sam_table <- as.data.frame(colData(microbe))
counts_table <- as.data.frame(assays(microbe))[, rownames(sam_table)]
counts_table <- counts_table
y <- counts_table %>% upsample_counts(tax_table, tax_level) %>%
{
if (datatype == "relabu") {
counts_to_relabu(.)
}
else if (datatype == "logcpm") {
counts_to_logcpm(.)
}
else {
.
}
} %>% {
if (sum(base::rowSums(as.matrix(.)) == 0) > 0) {
. <- .[-which(base::rowSums(as.matrix(.)) == 0),
]
}
else {
.
}
} %>%  t()
X <- sam_table %>%
select(boral_covariates)
# change chars to nums ----
# Identify and change character columns to numeric in the covariate matrix, else BORAL will fails. Strings are alphabetically. So "A" becomes 1, "B" becomes 2, etc.
char_columns <- sapply(X, is.character)
char_columns <- names(char_columns[char_columns==TRUE])
X[ , char_columns] <- apply(X[ , char_columns,drop=F], 2,
function(x) as.numeric(as.factor(x)))
# define testpath ----
testpath <- file.path(tempdir(), "jagsboralmodel.txt")
# define MCMC control based on shiny settings ----
if (MCMC.control == "High"){
control = list(n.burnin = 10000, n.iteration = 40000, n.thin = 30, seed = 123)
} else if (MCMC.control == "Disease_Challenge"){
control = list(n.burnin = 1000, n.iteration = 4000, n.thin = 30, seed = 123)
} else if (MCMC.control == "DryRun"){
control = list(n.burnin = 10, n.iteration = 400, n.thin = 30, seed = 1)
}
# run boral ----
fit_traits <- boral(y, X = X, family = family,
mcmc.control = control, model.name = testpath,
lv.control = list(num.lv = 2, type = "independent", distmat = NULL), save.model = TRUE)
# plot model ----
ord_plot <- gg_lvsplot(fit_traits, include = "both") + scale_color_brewer(palette = "Dark2")
return(ord_plot)
}
# test
doBORAL(MAE, "genus", boral_covariates=c("AGE","DISEASE","SEX"), family = "normal", datatype ="logcpm", MCMC.control="DryRun")
runApp()
runApp()
